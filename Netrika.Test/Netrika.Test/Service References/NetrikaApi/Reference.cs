//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Netrika {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="VersionInfo", Namespace="http://schemas.datacontract.org/2004/07/WebService.Core")]
    [Serializable()]
    public partial class VersionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string DatabaseVersionField;
        
        [OptionalField()]
        private string ServiceVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string DatabaseVersion {
            get {
                return this.DatabaseVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseVersionField, value) != true)) {
                    this.DatabaseVersionField = value;
                    this.RaisePropertyChanged("DatabaseVersion");
                }
            }
        }
        
        [DataMember()]
        public string ServiceVersion {
            get {
                return this.ServiceVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceVersionField, value) != true)) {
                    this.ServiceVersionField = value;
                    this.RaisePropertyChanged("ServiceVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="PatientDto", Namespace="http://schemas.datacontract.org/2004/07/EMKService.Data.Dto")]
    [Serializable()]
    public partial class PatientDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private AddressDto[] AddressesField;
        
        [OptionalField()]
        private System.DateTime BirthDateField;
        
        [OptionalField()]
        private BirthPlaceDto BirthPlaceField;
        
        [OptionalField()]
        private ContactPersonDto ContactPersonField;
        
        [OptionalField()]
        private ContactDto[] ContactsField;
        
        [OptionalField()]
        private System.Nullable<System.DateTime> DeathTimeField;
        
        [OptionalField()]
        private DocumentDto[] DocumentsField;
        
        [OptionalField()]
        private string FamilyNameField;
        
        [OptionalField()]
        private string GivenNameField;
        
        [OptionalField()]
        private System.Nullable<byte> IdBloodTypeField;
        
        [OptionalField()]
        private string IdGlobalField;
        
        [OptionalField()]
        private System.Nullable<byte> IdLivingAreaTypeField;
        
        [OptionalField()]
        private string IdPatientMISField;
        
        [OptionalField()]
        private bool IsVipField;
        
        [OptionalField()]
        private JobDto JobField;
        
        [OptionalField()]
        private string MiddleNameField;
        
        [OptionalField()]
        private PrivilegeDto PrivilegeField;
        
        [OptionalField()]
        private byte SexField;
        
        [OptionalField()]
        private System.Nullable<byte> SocialGroupField;
        
        [OptionalField()]
        private string SocialStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public AddressDto[] Addresses {
            get {
                return this.AddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressesField, value) != true)) {
                    this.AddressesField = value;
                    this.RaisePropertyChanged("Addresses");
                }
            }
        }
        
        [DataMember()]
        public System.DateTime BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((this.BirthDateField.Equals(value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [DataMember()]
        public BirthPlaceDto BirthPlace {
            get {
                return this.BirthPlaceField;
            }
            set {
                if ((object.ReferenceEquals(this.BirthPlaceField, value) != true)) {
                    this.BirthPlaceField = value;
                    this.RaisePropertyChanged("BirthPlace");
                }
            }
        }
        
        [DataMember()]
        public ContactPersonDto ContactPerson {
            get {
                return this.ContactPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactPersonField, value) != true)) {
                    this.ContactPersonField = value;
                    this.RaisePropertyChanged("ContactPerson");
                }
            }
        }
        
        [DataMember()]
        public ContactDto[] Contacts {
            get {
                return this.ContactsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactsField, value) != true)) {
                    this.ContactsField = value;
                    this.RaisePropertyChanged("Contacts");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.DateTime> DeathTime {
            get {
                return this.DeathTimeField;
            }
            set {
                if ((this.DeathTimeField.Equals(value) != true)) {
                    this.DeathTimeField = value;
                    this.RaisePropertyChanged("DeathTime");
                }
            }
        }
        
        [DataMember()]
        public DocumentDto[] Documents {
            get {
                return this.DocumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentsField, value) != true)) {
                    this.DocumentsField = value;
                    this.RaisePropertyChanged("Documents");
                }
            }
        }
        
        [DataMember()]
        public string FamilyName {
            get {
                return this.FamilyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FamilyNameField, value) != true)) {
                    this.FamilyNameField = value;
                    this.RaisePropertyChanged("FamilyName");
                }
            }
        }
        
        [DataMember()]
        public string GivenName {
            get {
                return this.GivenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GivenNameField, value) != true)) {
                    this.GivenNameField = value;
                    this.RaisePropertyChanged("GivenName");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<byte> IdBloodType {
            get {
                return this.IdBloodTypeField;
            }
            set {
                if ((this.IdBloodTypeField.Equals(value) != true)) {
                    this.IdBloodTypeField = value;
                    this.RaisePropertyChanged("IdBloodType");
                }
            }
        }
        
        [DataMember()]
        public string IdGlobal {
            get {
                return this.IdGlobalField;
            }
            set {
                if ((object.ReferenceEquals(this.IdGlobalField, value) != true)) {
                    this.IdGlobalField = value;
                    this.RaisePropertyChanged("IdGlobal");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<byte> IdLivingAreaType {
            get {
                return this.IdLivingAreaTypeField;
            }
            set {
                if ((this.IdLivingAreaTypeField.Equals(value) != true)) {
                    this.IdLivingAreaTypeField = value;
                    this.RaisePropertyChanged("IdLivingAreaType");
                }
            }
        }
        
        [DataMember()]
        public string IdPatientMIS {
            get {
                return this.IdPatientMISField;
            }
            set {
                if ((object.ReferenceEquals(this.IdPatientMISField, value) != true)) {
                    this.IdPatientMISField = value;
                    this.RaisePropertyChanged("IdPatientMIS");
                }
            }
        }
        
        [DataMember()]
        public bool IsVip {
            get {
                return this.IsVipField;
            }
            set {
                if ((this.IsVipField.Equals(value) != true)) {
                    this.IsVipField = value;
                    this.RaisePropertyChanged("IsVip");
                }
            }
        }
        
        [DataMember()]
        public JobDto Job {
            get {
                return this.JobField;
            }
            set {
                if ((object.ReferenceEquals(this.JobField, value) != true)) {
                    this.JobField = value;
                    this.RaisePropertyChanged("Job");
                }
            }
        }
        
        [DataMember()]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
        
        [DataMember()]
        public PrivilegeDto Privilege {
            get {
                return this.PrivilegeField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivilegeField, value) != true)) {
                    this.PrivilegeField = value;
                    this.RaisePropertyChanged("Privilege");
                }
            }
        }
        
        [DataMember()]
        public byte Sex {
            get {
                return this.SexField;
            }
            set {
                if ((this.SexField.Equals(value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<byte> SocialGroup {
            get {
                return this.SocialGroupField;
            }
            set {
                if ((this.SocialGroupField.Equals(value) != true)) {
                    this.SocialGroupField = value;
                    this.RaisePropertyChanged("SocialGroup");
                }
            }
        }
        
        [DataMember()]
        public string SocialStatus {
            get {
                return this.SocialStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.SocialStatusField, value) != true)) {
                    this.SocialStatusField = value;
                    this.RaisePropertyChanged("SocialStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="BirthPlaceDto", Namespace="http://schemas.datacontract.org/2004/07/EMKService.Data.Dto")]
    [Serializable()]
    public partial class BirthPlaceDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string CityField;
        
        [OptionalField()]
        private string CountryField;
        
        [OptionalField()]
        private string RegionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [DataMember()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [DataMember()]
        public string Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="ContactPersonDto", Namespace="http://schemas.datacontract.org/2004/07/EMKService.Data.Dto")]
    [Serializable()]
    public partial class ContactPersonDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private ContactDto[] ContactListField;
        
        [OptionalField()]
        private string FamilyNameField;
        
        [OptionalField()]
        private string GivenNameField;
        
        [OptionalField()]
        private string IdPersonMisField;
        
        [OptionalField()]
        private byte IdRelationTypeField;
        
        [OptionalField()]
        private string MiddleNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public ContactDto[] ContactList {
            get {
                return this.ContactListField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactListField, value) != true)) {
                    this.ContactListField = value;
                    this.RaisePropertyChanged("ContactList");
                }
            }
        }
        
        [DataMember()]
        public string FamilyName {
            get {
                return this.FamilyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FamilyNameField, value) != true)) {
                    this.FamilyNameField = value;
                    this.RaisePropertyChanged("FamilyName");
                }
            }
        }
        
        [DataMember()]
        public string GivenName {
            get {
                return this.GivenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GivenNameField, value) != true)) {
                    this.GivenNameField = value;
                    this.RaisePropertyChanged("GivenName");
                }
            }
        }
        
        [DataMember()]
        public string IdPersonMis {
            get {
                return this.IdPersonMisField;
            }
            set {
                if ((object.ReferenceEquals(this.IdPersonMisField, value) != true)) {
                    this.IdPersonMisField = value;
                    this.RaisePropertyChanged("IdPersonMis");
                }
            }
        }
        
        [DataMember()]
        public byte IdRelationType {
            get {
                return this.IdRelationTypeField;
            }
            set {
                if ((this.IdRelationTypeField.Equals(value) != true)) {
                    this.IdRelationTypeField = value;
                    this.RaisePropertyChanged("IdRelationType");
                }
            }
        }
        
        [DataMember()]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="JobDto", Namespace="http://schemas.datacontract.org/2004/07/EMKService.Data.Dto")]
    [Serializable()]
    public partial class JobDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string CompanyNameField;
        
        [OptionalField()]
        private System.Nullable<System.DateTime> DateEndField;
        
        [OptionalField()]
        private System.Nullable<System.DateTime> DateStartField;
        
        [OptionalField()]
        private string OgrnCodeField;
        
        [OptionalField()]
        private string PositionField;
        
        [OptionalField()]
        private string SphereField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.DateTime> DateEnd {
            get {
                return this.DateEndField;
            }
            set {
                if ((this.DateEndField.Equals(value) != true)) {
                    this.DateEndField = value;
                    this.RaisePropertyChanged("DateEnd");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.DateTime> DateStart {
            get {
                return this.DateStartField;
            }
            set {
                if ((this.DateStartField.Equals(value) != true)) {
                    this.DateStartField = value;
                    this.RaisePropertyChanged("DateStart");
                }
            }
        }
        
        [DataMember()]
        public string OgrnCode {
            get {
                return this.OgrnCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.OgrnCodeField, value) != true)) {
                    this.OgrnCodeField = value;
                    this.RaisePropertyChanged("OgrnCode");
                }
            }
        }
        
        [DataMember()]
        public string Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [DataMember()]
        public string Sphere {
            get {
                return this.SphereField;
            }
            set {
                if ((object.ReferenceEquals(this.SphereField, value) != true)) {
                    this.SphereField = value;
                    this.RaisePropertyChanged("Sphere");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="PrivilegeDto", Namespace="http://schemas.datacontract.org/2004/07/EMKService.Data.Dto")]
    [Serializable()]
    public partial class PrivilegeDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string CommentField;
        
        [OptionalField()]
        private System.DateTime DateEndField;
        
        [OptionalField()]
        private System.DateTime DateStartField;
        
        [OptionalField()]
        private string DisabilityDegreeField;
        
        [OptionalField()]
        private System.Nullable<byte> IdDisabilityTypeField;
        
        [OptionalField()]
        private byte IdPrivilegeTypeField;
        
        [OptionalField()]
        private bool IsMainField;
        
        [OptionalField()]
        private string MkbCodeField;
        
        [OptionalField()]
        private DocumentDto PrivilegeDocumentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [DataMember()]
        public System.DateTime DateEnd {
            get {
                return this.DateEndField;
            }
            set {
                if ((this.DateEndField.Equals(value) != true)) {
                    this.DateEndField = value;
                    this.RaisePropertyChanged("DateEnd");
                }
            }
        }
        
        [DataMember()]
        public System.DateTime DateStart {
            get {
                return this.DateStartField;
            }
            set {
                if ((this.DateStartField.Equals(value) != true)) {
                    this.DateStartField = value;
                    this.RaisePropertyChanged("DateStart");
                }
            }
        }
        
        [DataMember()]
        public string DisabilityDegree {
            get {
                return this.DisabilityDegreeField;
            }
            set {
                if ((object.ReferenceEquals(this.DisabilityDegreeField, value) != true)) {
                    this.DisabilityDegreeField = value;
                    this.RaisePropertyChanged("DisabilityDegree");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<byte> IdDisabilityType {
            get {
                return this.IdDisabilityTypeField;
            }
            set {
                if ((this.IdDisabilityTypeField.Equals(value) != true)) {
                    this.IdDisabilityTypeField = value;
                    this.RaisePropertyChanged("IdDisabilityType");
                }
            }
        }
        
        [DataMember()]
        public byte IdPrivilegeType {
            get {
                return this.IdPrivilegeTypeField;
            }
            set {
                if ((this.IdPrivilegeTypeField.Equals(value) != true)) {
                    this.IdPrivilegeTypeField = value;
                    this.RaisePropertyChanged("IdPrivilegeType");
                }
            }
        }
        
        [DataMember()]
        public bool IsMain {
            get {
                return this.IsMainField;
            }
            set {
                if ((this.IsMainField.Equals(value) != true)) {
                    this.IsMainField = value;
                    this.RaisePropertyChanged("IsMain");
                }
            }
        }
        
        [DataMember()]
        public string MkbCode {
            get {
                return this.MkbCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.MkbCodeField, value) != true)) {
                    this.MkbCodeField = value;
                    this.RaisePropertyChanged("MkbCode");
                }
            }
        }
        
        [DataMember()]
        public DocumentDto PrivilegeDocument {
            get {
                return this.PrivilegeDocumentField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivilegeDocumentField, value) != true)) {
                    this.PrivilegeDocumentField = value;
                    this.RaisePropertyChanged("PrivilegeDocument");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="AddressDto", Namespace="http://schemas.datacontract.org/2004/07/EMKService.Data.Dto")]
    [Serializable()]
    public partial class AddressDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string AppartmentField;
        
        [OptionalField()]
        private string BuildingField;
        
        [OptionalField()]
        private string CityField;
        
        [OptionalField()]
        private string GeoDataField;
        
        [OptionalField()]
        private byte IdAddressTypeField;
        
        [OptionalField()]
        private System.Nullable<int> PostalCodeField;
        
        [OptionalField()]
        private string StreetField;
        
        [OptionalField()]
        private string StringAddressField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Appartment {
            get {
                return this.AppartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.AppartmentField, value) != true)) {
                    this.AppartmentField = value;
                    this.RaisePropertyChanged("Appartment");
                }
            }
        }
        
        [DataMember()]
        public string Building {
            get {
                return this.BuildingField;
            }
            set {
                if ((object.ReferenceEquals(this.BuildingField, value) != true)) {
                    this.BuildingField = value;
                    this.RaisePropertyChanged("Building");
                }
            }
        }
        
        [DataMember()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [DataMember()]
        public string GeoData {
            get {
                return this.GeoDataField;
            }
            set {
                if ((object.ReferenceEquals(this.GeoDataField, value) != true)) {
                    this.GeoDataField = value;
                    this.RaisePropertyChanged("GeoData");
                }
            }
        }
        
        [DataMember()]
        public byte IdAddressType {
            get {
                return this.IdAddressTypeField;
            }
            set {
                if ((this.IdAddressTypeField.Equals(value) != true)) {
                    this.IdAddressTypeField = value;
                    this.RaisePropertyChanged("IdAddressType");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<int> PostalCode {
            get {
                return this.PostalCodeField;
            }
            set {
                if ((this.PostalCodeField.Equals(value) != true)) {
                    this.PostalCodeField = value;
                    this.RaisePropertyChanged("PostalCode");
                }
            }
        }
        
        [DataMember()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        [DataMember()]
        public string StringAddress {
            get {
                return this.StringAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.StringAddressField, value) != true)) {
                    this.StringAddressField = value;
                    this.RaisePropertyChanged("StringAddress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="ContactDto", Namespace="http://schemas.datacontract.org/2004/07/EMKService.Data.Dto")]
    [Serializable()]
    public partial class ContactDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string ContactValueField;
        
        [OptionalField()]
        private byte IdContactTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string ContactValue {
            get {
                return this.ContactValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactValueField, value) != true)) {
                    this.ContactValueField = value;
                    this.RaisePropertyChanged("ContactValue");
                }
            }
        }
        
        [DataMember()]
        public byte IdContactType {
            get {
                return this.IdContactTypeField;
            }
            set {
                if ((this.IdContactTypeField.Equals(value) != true)) {
                    this.IdContactTypeField = value;
                    this.RaisePropertyChanged("IdContactType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="DocumentDto", Namespace="http://schemas.datacontract.org/2004/07/EMKService.Data.Dto")]
    [Serializable()]
    public partial class DocumentDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string DocNField;
        
        [OptionalField()]
        private string DocSField;
        
        [OptionalField()]
        private string DocumentNameField;
        
        [OptionalField()]
        private System.Nullable<System.DateTime> ExpiredDateField;
        
        [OptionalField()]
        private byte IdDocumentTypeField;
        
        [OptionalField()]
        private string IdProviderField;
        
        [OptionalField()]
        private System.Nullable<System.DateTime> IssuedDateField;
        
        [OptionalField()]
        private string ProviderNameField;
        
        [OptionalField()]
        private string RegionCodeField;
        
        [OptionalField()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string DocN {
            get {
                return this.DocNField;
            }
            set {
                if ((object.ReferenceEquals(this.DocNField, value) != true)) {
                    this.DocNField = value;
                    this.RaisePropertyChanged("DocN");
                }
            }
        }
        
        [DataMember()]
        public string DocS {
            get {
                return this.DocSField;
            }
            set {
                if ((object.ReferenceEquals(this.DocSField, value) != true)) {
                    this.DocSField = value;
                    this.RaisePropertyChanged("DocS");
                }
            }
        }
        
        [DataMember()]
        public string DocumentName {
            get {
                return this.DocumentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentNameField, value) != true)) {
                    this.DocumentNameField = value;
                    this.RaisePropertyChanged("DocumentName");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.DateTime> ExpiredDate {
            get {
                return this.ExpiredDateField;
            }
            set {
                if ((this.ExpiredDateField.Equals(value) != true)) {
                    this.ExpiredDateField = value;
                    this.RaisePropertyChanged("ExpiredDate");
                }
            }
        }
        
        [DataMember()]
        public byte IdDocumentType {
            get {
                return this.IdDocumentTypeField;
            }
            set {
                if ((this.IdDocumentTypeField.Equals(value) != true)) {
                    this.IdDocumentTypeField = value;
                    this.RaisePropertyChanged("IdDocumentType");
                }
            }
        }
        
        [DataMember()]
        public string IdProvider {
            get {
                return this.IdProviderField;
            }
            set {
                if ((object.ReferenceEquals(this.IdProviderField, value) != true)) {
                    this.IdProviderField = value;
                    this.RaisePropertyChanged("IdProvider");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.DateTime> IssuedDate {
            get {
                return this.IssuedDateField;
            }
            set {
                if ((this.IssuedDateField.Equals(value) != true)) {
                    this.IssuedDateField = value;
                    this.RaisePropertyChanged("IssuedDate");
                }
            }
        }
        
        [DataMember()]
        public string ProviderName {
            get {
                return this.ProviderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderNameField, value) != true)) {
                    this.ProviderNameField = value;
                    this.RaisePropertyChanged("ProviderName");
                }
            }
        }
        
        [DataMember()]
        public string RegionCode {
            get {
                return this.RegionCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionCodeField, value) != true)) {
                    this.RegionCodeField = value;
                    this.RaisePropertyChanged("RegionCode");
                }
            }
        }
        
        [DataMember()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="RequestFault", Namespace="http://schemas.datacontract.org/2004/07/N3.EMK.Dto.Common")]
    [Serializable()]
    public partial class RequestFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string PropertyNameField;
        
        [OptionalField()]
        private string MessageField;
        
        [OptionalField()]
        private int ErrorCodeField;
        
        [OptionalField()]
        private RequestFault[] ErrorsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string PropertyName {
            get {
                return this.PropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyNameField, value) != true)) {
                    this.PropertyNameField = value;
                    this.RaisePropertyChanged("PropertyName");
                }
            }
        }
        
        [DataMember(Order=1)]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [DataMember(Order=2)]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [DataMember(Order=3)]
        public RequestFault[] Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="SourceType", Namespace="http://schemas.datacontract.org/2004/07/N3.EMK.Domain.Enums")]
    public enum SourceType : int {
        
        [EnumMember()]
        Reg = 1,
        
        [EnumMember()]
        Fed = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NetrikaApi.IPixService")]
    public interface IPixService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSupport/GetVersion", ReplyAction="http://tempuri.org/IServiceSupport/GetVersionResponse")]
        VersionInfo GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSupport/GetVersion", ReplyAction="http://tempuri.org/IServiceSupport/GetVersionResponse")]
        System.Threading.Tasks.Task<VersionInfo> GetVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixService/AddPatient", ReplyAction="http://tempuri.org/IPixService/AddPatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RequestFault), Action="http://tempuri.org/IPixService/AddPatientRequestFaultFault", Name="RequestFault", Namespace="http://schemas.datacontract.org/2004/07/N3.EMK.Dto.Common")]
        void AddPatient(string guid, string idLPU, PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixService/AddPatient", ReplyAction="http://tempuri.org/IPixService/AddPatientResponse")]
        System.Threading.Tasks.Task AddPatientAsync(string guid, string idLPU, PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixService/UpdatePatient", ReplyAction="http://tempuri.org/IPixService/UpdatePatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RequestFault), Action="http://tempuri.org/IPixService/UpdatePatientRequestFaultFault", Name="RequestFault", Namespace="http://schemas.datacontract.org/2004/07/N3.EMK.Dto.Common")]
        void UpdatePatient(string guid, string idLPU, PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixService/UpdatePatient", ReplyAction="http://tempuri.org/IPixService/UpdatePatientResponse")]
        System.Threading.Tasks.Task UpdatePatientAsync(string guid, string idLPU, PatientDto patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixService/GetPatient", ReplyAction="http://tempuri.org/IPixService/GetPatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RequestFault), Action="http://tempuri.org/IPixService/GetPatientRequestFaultFault", Name="RequestFault", Namespace="http://schemas.datacontract.org/2004/07/N3.EMK.Dto.Common")]
        PatientDto[] GetPatient(string guid, string idLPU, PatientDto patient, SourceType idSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixService/GetPatient", ReplyAction="http://tempuri.org/IPixService/GetPatientResponse")]
        System.Threading.Tasks.Task<PatientDto[]> GetPatientAsync(string guid, string idLPU, PatientDto patient, SourceType idSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixService/GetPatientByGlobalId", ReplyAction="http://tempuri.org/IPixService/GetPatientByGlobalIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RequestFault), Action="http://tempuri.org/IPixService/GetPatientByGlobalIdRequestFaultFault", Name="RequestFault", Namespace="http://schemas.datacontract.org/2004/07/N3.EMK.Dto.Common")]
        PatientDto GetPatientByGlobalId(string guid, string patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPixService/GetPatientByGlobalId", ReplyAction="http://tempuri.org/IPixService/GetPatientByGlobalIdResponse")]
        System.Threading.Tasks.Task<PatientDto> GetPatientByGlobalIdAsync(string guid, string patientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPixServiceChannel : IPixService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PixServiceClient : System.ServiceModel.ClientBase<IPixService>, IPixService {
        
        public PixServiceClient() {
        }
        
        public PixServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PixServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PixServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PixServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public VersionInfo GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public System.Threading.Tasks.Task<VersionInfo> GetVersionAsync() {
            return base.Channel.GetVersionAsync();
        }
        
        public void AddPatient(string guid, string idLPU, PatientDto patient) {
            base.Channel.AddPatient(guid, idLPU, patient);
        }
        
        public System.Threading.Tasks.Task AddPatientAsync(string guid, string idLPU, PatientDto patient) {
            return base.Channel.AddPatientAsync(guid, idLPU, patient);
        }
        
        public void UpdatePatient(string guid, string idLPU, PatientDto patient) {
            base.Channel.UpdatePatient(guid, idLPU, patient);
        }
        
        public System.Threading.Tasks.Task UpdatePatientAsync(string guid, string idLPU, PatientDto patient) {
            return base.Channel.UpdatePatientAsync(guid, idLPU, patient);
        }
        
        public PatientDto[] GetPatient(string guid, string idLPU, PatientDto patient, SourceType idSource) {
            return base.Channel.GetPatient(guid, idLPU, patient, idSource);
        }
        
        public System.Threading.Tasks.Task<PatientDto[]> GetPatientAsync(string guid, string idLPU, PatientDto patient, SourceType idSource) {
            return base.Channel.GetPatientAsync(guid, idLPU, patient, idSource);
        }
        
        public PatientDto GetPatientByGlobalId(string guid, string patientId) {
            return base.Channel.GetPatientByGlobalId(guid, patientId);
        }
        
        public System.Threading.Tasks.Task<PatientDto> GetPatientByGlobalIdAsync(string guid, string patientId) {
            return base.Channel.GetPatientByGlobalIdAsync(guid, patientId);
        }
    }
}
